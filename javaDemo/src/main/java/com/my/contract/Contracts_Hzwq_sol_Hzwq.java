package com.my.contract;

import org.bouncycastle.pqc.math.linearalgebra.BigEndianConversions;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.*;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.Web3jService;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.io.Serializable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class Contracts_Hzwq_sol_Hzwq extends Contract {
    private static final String BINARY = "0x60806040526305f5e100600555600060065534801561001d57600080fd5b50600180546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb47517905561239d806100536000396000f3fe6080604052600436106100c85760003560e01c80636cb08abd1161007a5780636cb08abd146103d157806373569340146104965780637731f09d146105cc5780637f2b162e14610702578063a1970b65146107b5578063a55faf67146107df578063b0e353bd14610885578063b11558ee14610929576100c8565b8063010489d1146100cd5780631b5ac4b51461014a57806327dc297e1461018657806338bbfa50146102405780633f180b3d1461037d578063653721471461039257806368dadfc6146103a7575b600080fd5b6100d561093e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010f5781810151838201526020016100f7565b50505050905090810190601f16801561013c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015657600080fd5b506101746004803603602081101561016d57600080fd5b5035610a0b565b60408051918252519081900360200190f35b34801561019257600080fd5b5061023e600480360360408110156101a957600080fd5b81359190810190604081016020820135600160201b8111156101ca57600080fd5b8201836020820111156101dc57600080fd5b803590602001918460018302840111600160201b831117156101fd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a28945050505050565b005b34801561024c57600080fd5b5061023e6004803603606081101561026357600080fd5b81359190810190604081016020820135600160201b81111561028457600080fd5b82018360208201111561029657600080fd5b803590602001918460018302840111600160201b831117156102b757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561030957600080fd5b82018360208201111561031b57600080fd5b803590602001918460018302840111600160201b8311171561033c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a67945050505050565b34801561038957600080fd5b506100d5610a98565b34801561039e57600080fd5b506100d5610b26565b3480156103b357600080fd5b506100d5600480360360208110156103ca57600080fd5b5035610b81565b3480156103dd57600080fd5b50610482600480360360208110156103f457600080fd5b810190602081018135600160201b81111561040e57600080fd5b82018360208201111561042057600080fd5b803590602001918460018302840111600160201b8311171561044157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610fe5945050505050565b604080519115158252519081900360200190f35b3480156104a257600080fd5b50610482600480360360408110156104b957600080fd5b810190602081018135600160201b8111156104d357600080fd5b8201836020820111156104e557600080fd5b803590602001918460018302840111600160201b8311171561050657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561055857600080fd5b82018360208201111561056a57600080fd5b803590602001918460018302840111600160201b8311171561058b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610feb945050505050565b3480156105d857600080fd5b50610482600480360360408110156105ef57600080fd5b810190602081018135600160201b81111561060957600080fd5b82018360208201111561061b57600080fd5b803590602001918460018302840111600160201b8311171561063c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561068e57600080fd5b8201836020820111156106a057600080fd5b803590602001918460018302840111600160201b831117156106c157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611007945050505050565b34801561070e57600080fd5b506104826004803603604081101561072557600080fd5b810190602081018135600160201b81111561073f57600080fd5b82018360208201111561075157600080fd5b803590602001918460018302840111600160201b8311171561077257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506110a5915050565b3480156107c157600080fd5b506100d5600480360360208110156107d857600080fd5b5035611134565b6100d5600480360360408110156107f557600080fd5b810190602081018135600160201b81111561080f57600080fd5b82018360208201111561082157600080fd5b803590602001918460018302840111600160201b8311171561084257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611284915050565b61023e6004803603602081101561089b57600080fd5b810190602081018135600160201b8111156108b557600080fd5b8201836020820111156108c757600080fd5b803590602001918460018302840111600160201b831117156108e857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506113f8945050505050565b34801561093557600080fd5b5061017461145b565b6060600554600654106109515760006006555b600680546001810190915561096590611461565b8051610979916007916020909101906122d0565b506007805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b505050505090505b90565b600080821215610a2057816000039050610a23565b50805b919050565b610a30611522565b6001600160a01b0316336001600160a01b031614610a4d57600080fd5b8051610a609060089060208401906122d0565b5050600955565b5050600080805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5550565b6007805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b1e5780601f10610af357610100808354040283529160200191610b1e565b820191906000526020600020905b815481529060010190602001808311610b0157829003601f168201915b505050505081565b6008805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610b1e5780601f10610af357610100808354040283529160200191610b1e565b60608160011415610bb0575060408051808201909152600781526618d95c9d17da5960ca1b6020820152610a23565b8160021415610bdf5750604080518082019091526009815268636572745f636f646560b81b6020820152610a23565b8160031415610c0e5750604080518082019091526009815268766f6c745f636f646560b81b6020820152610a23565b8160041415610c41575060408051808201909152600d81526c1c985d195917d8dd5c9c995b9d609a1b6020820152610a23565b8160051415610c75575060408051808201909152600e81526d6465746563745f7461736b5f6e6f60901b6020820152610a23565b8160061415610ca8575060408051808201909152600d81526c76657269666965645f6461746560981b6020820152610a23565b8160071415610cdc575060408051808201909152600e81526d1b1a5b9957d8d95c9d1b9bd7da5960921b6020820152610a23565b8160081415610d0d575060408051808201909152600b81526a6469766963655f6e616d6560a81b6020820152610a23565b8160091415610d4857506040805180820190915260158152746469766963655f63657274696669636174655f6e6f60581b6020820152610a23565b81600a1415610d8157506040805180820190915260138152726469766963655f657870697265645f6461746560681b6020820152610a23565b81600b1415610db1575060408051808201909152600a81526965717569705f6e616d6560b01b6020820152610a23565b81600c1415610deb575060408051808201909152601481527365717569705f63657274696669636174655f6e6f60601b6020820152610a23565b81600d1415610e23575060408051808201909152601281527165717569705f657870697265645f6461746560701b6020820152610a23565b81600e1415610e4e5750604080518082019091526005815264706c61636560d81b6020820152610a23565b81600f1415610e7e575060408051808201909152600a81526974656d7065726175726560b01b6020820152610a23565b8160101415610eac575060408051808201909152600881526768756d696469747960c01b6020820152610a23565b8160111415610edf575060408051808201909152600d81526c3232ba32b1ba2fb832b939b7b760991b6020820152610a23565b8160121415610f13575060408051808201909152600e81526d1b1a5b9957d8d95c9d1b9bd7da5960921b6020820152610a23565b8160131415610f45575060408051808201909152600c81526b30bab234ba2fb832b939b7b760a11b6020820152610a23565b8160141415610f75575060408051808201909152600a81526931b7b731b63ab9b4b7b760b11b6020820152610a23565b8160151415610fa25750604080518082019091526007815266636572745f6e6f60c81b6020820152610a23565b8160161415610fd15750604080518082019091526009815268636572745f636f646560b81b6020820152610a23565b505060408051602081019091526000815290565b50600190565b6000818051906020012083805190602001201490505b92915050565b8051600090839083908380805b85518110156110965784828151811061102957fe5b602001015160f81c60f81b6001600160f81b03191686828151811061104a57fe5b01602001516001600160f81b031916141561106e5760019283019290910190611077565b60009250600091505b8383141561108e5760019650505050505050611001565b600101611014565b50600098975050505050505050565b60008060018314156110ed57600760015b8181116110ea576110cf866110ca83611134565b611007565b9250826110e25760009350505050611001565b6001016110b6565b50505b826002141561112d57601660015b81811161112a5761110f866110ca83610b81565b9250826111225760009350505050611001565b6001016110fb565b50505b9392505050565b6060816001141561116457506040805180820190915260088152671b595d195c97da5960c21b6020820152610a23565b816002141561119257506040805180820190915260088152676261725f636f646560c01b6020820152610a23565b81600314156111c15750604080518082019091526009815268747970655f636f646560b81b6020820152610a23565b81600414156111ed57506040805180820190915260068152656f72675f6e6f60d01b6020820152610a23565b816005141561121b57506040805180820190915260088152676f72675f6e616d6560c01b6020820152610a23565b816006141561125257506040805180820190915260118152706d616e7566616374757265725f6e616d6560781b6020820152610a23565b8160071415610fd1575060408051808201909152600c81526b36b0b73ab330b1ba3ab932b960a11b6020820152610a23565b606080606061129161093e565b90508360011415611303576112c16040518060400160405280600381526020016244442d60e81b8152508661170b565b91508060005b8151600903811015611300576112f6604051806040016040528060018152602001600360fc1b8152508461170b565b92506001016112c7565b50505b8360021415611374576113326040518060400160405280600481526020016344535a2d60e01b8152508661170b565b91508060005b815160080381101561137157611367604051806040016040528060018152602001600360fc1b8152508461170b565b9250600101611338565b50505b83600314156113e5576113a3604051806040016040528060048152602001634453482d60e01b8152508661170b565b91508060005b81516008038110156113e2576113d8604051806040016040528060018152602001600360fc1b8152508461170b565b92506001016113a9565b50505b6113ef828261170b565b95945050505050565b306001600160a01b0316316114276040518060400160405280600381526020016215549360ea1b815250611747565b1061143157611458565b6114566040518060400160405280600381526020016215549360ea1b81525082611993565b505b50565b60095481565b60608161148657506040805180820190915260018152600360fc1b6020820152610a23565b8160005b811561149e57600101600a8204915061148a565b6060816040519080825280601f01601f1916602001820160405280156114cb576020820181803883390190505b50905060001982015b851561151957600a860660300160f81b828280600190039350815181106114f757fe5b60200101906001600160f81b031916908160001a905350600a860495506114d4565b50949350505050565b6001546000906001600160a01b0316158061154f575060015461154d906001600160a01b0316611d51565b155b156115605761155e6000611d55565b505b600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156115b057600080fd5b505af11580156115c4573d6000803e3d6000fd5b505050506040513d60208110156115da57600080fd5b50516000546001600160a01b0390811691161461168d57600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b505050506040513d602081101561166b57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790555b6000809054906101000a90046001600160a01b03166001600160a01b031663c281d19e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116da57600080fd5b505afa1580156116ee573d6000803e3d6000fd5b505050506040513d602081101561170457600080fd5b5051905090565b606061112d8383604051806020016040528060008152506040518060200160405280600081525060405180602001604052806000815250611d5f565b6001546000906001600160a01b031615806117745750600154611772906001600160a01b0316611d51565b155b15611785576117836000611d55565b505b600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117d557600080fd5b505af11580156117e9573d6000803e3d6000fd5b505050506040513d60208110156117ff57600080fd5b50516000546001600160a01b039081169116146118b257600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505050506040513d602081101561189057600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790555b6000805460405163524f388960e01b81526020600482018181528651602484015286516001600160a01b039094169463524f3889948894929384936044019290860191908190849084905b838110156119155781810151838201526020016118fd565b50505050905090810190601f1680156119425780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561196157600080fd5b505af1158015611975573d6000803e3d6000fd5b505050506040513d602081101561198b57600080fd5b505192915050565b6001546000906001600160a01b031615806119c057506001546119be906001600160a01b0316611d51565b155b156119d1576119cf6000611d55565b505b600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611a2157600080fd5b505af1158015611a35573d6000803e3d6000fd5b505050506040513d6020811015611a4b57600080fd5b50516000546001600160a01b03908116911614611afe57600160009054906101000a90046001600160a01b03166001600160a01b03166338cc48316040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611ab257600080fd5b505af1158015611ac6573d6000803e3d6000fd5b505050506040513d6020811015611adc57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790555b6000805460405163524f388960e01b81526020600482018181528751602484015287516001600160a01b039094169363524f38899389938392604490920191908501908083838b5b83811015611b5e578181015183820152602001611b46565b50505050905090810190601f168015611b8b5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015611baa57600080fd5b505af1158015611bbe573d6000803e3d6000fd5b505050506040513d6020811015611bd457600080fd5b50519050670de0b6b3a764000062030d403a0201811115611bf9575060009050611001565b6000805460405163adf59f9960e01b8152600481018381526060602483019081528851606484015288516001600160a01b039094169463adf59f9994879491938b938b9391929091604481019160849091019060208701908083838b5b83811015611c6e578181015183820152602001611c56565b50505050905090810190601f168015611c9b5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611cce578181015183820152602001611cb6565b50505050905090810190601f168015611cfb5780820380516001836020036101000a031916815260200191505b50955050505050506020604051808303818588803b158015611d1c57600080fd5b505af1158015611d30573d6000803e3d6000fd5b50505050506040513d6020811015611d4757600080fd5b5051949350505050565b3b90565b6000611001611f73565b6060808690506060869050606086905060608690506060869050606081518351855187518951010101016040519080825280601f01601f191660200182016040528015611db3576020820181803883390190505b509050806000805b8851811015611e0c57888181518110611dd057fe5b602001015160f81c60f81b838380600101945081518110611ded57fe5b60200101906001600160f81b031916908160001a905350600101611dbb565b5060005b8751811015611e6157878181518110611e2557fe5b602001015160f81c60f81b838380600101945081518110611e4257fe5b60200101906001600160f81b031916908160001a905350600101611e10565b5060005b8651811015611eb657868181518110611e7a57fe5b602001015160f81c60f81b838380600101945081518110611e9757fe5b60200101906001600160f81b031916908160001a905350600101611e65565b5060005b8551811015611f0b57858181518110611ecf57fe5b602001015160f81c60f81b838380600101945081518110611eec57fe5b60200101906001600160f81b031916908160001a905350600101611eba565b5060005b8451811015611f6057848181518110611f2457fe5b602001015160f81c60f81b838380600101945081518110611f4157fe5b60200101906001600160f81b031916908160001a905350600101611f0f565b50909d9c50505050505050505050505050565b600080611f93731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed611d51565b1115611ff257600180546001600160a01b031916731d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed17905560408051808201909152600b81526a195d1a17db585a5b9b995d60aa1b6020820152611fea906122c1565b506001610a08565b600061201173c03a2615d5efaf5f49f60b7bb6583eaec212fdf1611d51565b111561206957600180546001600160a01b03191673c03a2615d5efaf5f49f60b7bb6583eaec212fdf117905560408051808201909152600c81526b6574685f726f707374656e3360a01b6020820152611fea906122c1565b600061208873b7a07bcf2ba2f2703b24c0691b5278999c59ac7e611d51565b11156120dd57600180546001600160a01b03191673b7a07bcf2ba2f2703b24c0691b5278999c59ac7e17905560408051808201909152600981526832ba342fb5b7bb30b760b91b6020820152611fea906122c1565b60006120fc73146500cfd35b22e4a392fe0adc06de1a1368ed48611d51565b111561215357600180546001600160a01b03191673146500cfd35b22e4a392fe0adc06de1a1368ed4817905560408051808201909152600b81526a6574685f72696e6b65627960a81b6020820152611fea906122c1565b600061217273a2998efd205fb9d4b4963afb70778d6354ad3a41611d51565b11156121c857600180546001600160a01b03191673a2998efd205fb9d4b4963afb70778d6354ad3a4117905560408051808201909152600a8152696574685f676f65726c6960b01b6020820152611fea906122c1565b60006121e7736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475611d51565b11156122195750600180546001600160a01b031916736f485c8bf6fc43ea212e93bbf8ce046c7f1cb475178155610a08565b60006122387320e12a1f859b3feae5fb2a0a32c18f5a65555bbf611d51565b111561226a5750600180546001600160a01b0319167320e12a1f859b3feae5fb2a0a32c18f5a65555bbf178155610a08565b60006122897351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa611d51565b11156122bb5750600180546001600160a01b0319167351efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa178155610a08565b50600090565b80516114569060029060208401905b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061231157805160ff191683800117855561233e565b8280016001018555821561233e579182015b8281111561233e578251825591602001919060010190612323565b5061234a92915061234e565b5090565b610a0891905b8082111561234a576000815560010161235456fea265627a7a723058205bf9c728680c3a6e3c6ec2ae67d52242936a88fa34bd07210f158120cdfbaca664736f6c634300050a0032";

    public static final String FUNC_ETHUSD = "ETHUSD";

    public static final String FUNC_CHECKJSON = "checkJson";

    public static final String FUNC_EXAMINE1 = "examine1";

    public static final String FUNC_EXAMINE2 = "examine2";

    public static final String FUNC_EXAMINE3 = "examine3";

    public static final String FUNC_ONLYCODE = "onlyCode";

    public static final String FUNC_SIGNATURE = "signature";

    public static final String FUNC_CHECKJSONDATA = "checkJsonData";



    @Deprecated
    protected Contracts_Hzwq_sol_Hzwq(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Contracts_Hzwq_sol_Hzwq(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Contracts_Hzwq_sol_Hzwq(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Contracts_Hzwq_sol_Hzwq(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Contracts_Hzwq_sol_Hzwq> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Contracts_Hzwq_sol_Hzwq.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Contracts_Hzwq_sol_Hzwq> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Contracts_Hzwq_sol_Hzwq.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Contracts_Hzwq_sol_Hzwq> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Contracts_Hzwq_sol_Hzwq.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Contracts_Hzwq_sol_Hzwq> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Contracts_Hzwq_sol_Hzwq.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }



    public RemoteCall<TransactionReceipt> ETHUSD() {
        final Function function = new Function(
                FUNC_ETHUSD,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> signature(String url) {
        final Function function = new Function(
                FUNC_SIGNATURE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(url)),
                Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function , new BigInteger("3"));
    }

    public RemoteCall<TransactionReceipt> updatePrice() {
        final Function function = new Function(
                "updatePrice",
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function , new BigInteger("1"));
    }


    public RemoteCall<Bool> checkJsonDataCall(String json , BigInteger type) {
        final Function function = new Function(
                FUNC_CHECKJSONDATA,
                Arrays.<Type>asList(
                        new org.web3j.abi.datatypes.Utf8String(json),
                        new Uint(type)
                ),
                Arrays.asList(
                        new TypeReference<Bool>() {}
                )
        );
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> checkJsonData(String json) {
        final Function function = new Function(
                FUNC_CHECKJSONDATA,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(json)),
                Arrays.asList(
                        new TypeReference<Bool>() {}
                )
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> checkJson(String json) {
        final Function function = new Function(
                FUNC_CHECKJSON,
                Arrays.<Type>asList(
                        new org.web3j.abi.datatypes.Utf8String(json)
                ),
                Arrays.asList(
                        new TypeReference<Bool>() {}
                )
        );
        return executeRemoteCallSingleValueReturn(function);
    }





    public RemoteCall<List<Type>> examine1(String json,
                                     String conc_code,
                                     String volt_conc_code,
                                     String intuit_conc_code,
                                     String starting_conc_code,
                                     String creeping_conc_code,
                                     String const_conc_code) {
        final Function function = new Function(
                FUNC_EXAMINE1,
                Arrays.<Type>asList(
                        new Utf8String(json),
                        new Utf8String(conc_code),
                        new Utf8String(volt_conc_code),
                        new Utf8String(intuit_conc_code),
                        new Utf8String(starting_conc_code),
                        new Utf8String(creeping_conc_code),
                        new Utf8String(const_conc_code)
                ),
                Arrays.asList(
                        new TypeReference<Bool>() {
                        },
                        new TypeReference<Utf8String>() {
                        },
                        new TypeReference<Uint>() {
                        }
                )
        );
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteCall<List<Type>> examine2(BigInteger dayerr_conc_code,
                                     BigInteger clock_error,
                                     BigInteger met_value,
                                     BigInteger std_value,
                                     BigInteger time_err,
                                     String clock_conc) {
        final Function function = new Function(
                FUNC_EXAMINE2,
                Arrays.<Type>asList(
                        new Int(dayerr_conc_code),
                        new Int(clock_error),
                        new Uint(met_value),
                        new Uint(std_value),
                        new Uint(time_err),
                        new Utf8String(clock_conc)
                ),
                Arrays.asList(
                        new TypeReference<Bool>() {
                        },
                        new TypeReference<Utf8String>() {
                        },
                        new TypeReference<Uint>() {
                        }
                )
        );
        return executeRemoteCallMultipleValueReturn(function);
    }


    public static Bytes32 stringToBytes32(String string) {
        byte[] byteValue = string.getBytes();
        byte[] byteValueLen32 = new byte[32];
        System.arraycopy(byteValue, 0, byteValueLen32, 0, byteValue.length);
        return new Bytes32(byteValueLen32);
    }






    public RemoteCall<List<Type>> examine3(String[] data , BigInteger[] data2) {
        Bytes32[] _dataBytes32 = new Bytes32[data.length];
        Int256[] _dataUint = new Int256[data2.length];

        for(int i = 0 ; i < data.length ; i++) {
            _dataBytes32[i] = stringToBytes32(data[i]);
        }
        for(int i = 0 ; i < data2.length ; i++) {
            _dataUint[i] = new Int256(data2[i]);
        }

        DynamicArray<Bytes32> inputDataByte32 = new DynamicArray(Bytes32.class , _dataBytes32);
        DynamicArray<Int256>     inputDataInt    = new DynamicArray(Int256.class , _dataUint);

        final Function function = new Function(
                FUNC_EXAMINE3,
                Arrays.<Type>asList(
                        inputDataByte32
//                        inputDataInt
                ),
                Arrays.asList(
                        new TypeReference<Bool>() {
                        },
                        new TypeReference<Utf8String>() {
                        },
                        new TypeReference<Uint>() {
                        }
                )
        );
        return executeRemoteCallMultipleValueReturn(function);
    }



    public RemoteCall<TransactionReceipt> onlyCode(String year , BigInteger type) {
        final Function function = new Function(
                FUNC_ONLYCODE,
                Arrays.<Type>asList(
                        new org.web3j.abi.datatypes.Utf8String(year),
                        new org.web3j.abi.datatypes.Uint(type)
                ),
                Arrays.asList(
                        new TypeReference<Utf8String>() {}
                )          );
        return executeRemoteCallTransaction(function);
    }


    public RemoteCall<Utf8String> onlyCodeCall(String year , BigInteger type) {
        final Function function = new Function(
                FUNC_ONLYCODE,
                Arrays.<Type>asList(
                        new org.web3j.abi.datatypes.Utf8String(year),
                        new org.web3j.abi.datatypes.Uint(type)

                ),
                Arrays.asList(
                        new TypeReference<Utf8String>() {}
                )          );
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<List<Type>> onlyCode2(String json) {
        final Function function = new Function(
                FUNC_ONLYCODE,
                Arrays.asList(
                        new org.web3j.abi.datatypes.Utf8String(json)
                ),
                Arrays.asList(
                        new TypeReference<Utf8String>() {}
                )          );
        return executeRemoteCallMultipleValueReturn(function);
    }


    public RemoteCall<Utf8String> arrTest(List<String> data) {
        //首先把String转换成Bytes32
        Bytes32[] _dataBytes32 = new Bytes32[data.size()];
        List<Uint> _dataUint = new ArrayList<>();

        for(int i = 0 ; i < data.size() ; i++) {
            _dataBytes32[i] = stringToBytes32(data.get(i));
        }
        //需要使用DynamicArray 进行参数传递其他传递方式均出现错误 如： 直接传入参数dataBytes32 的数组，程序报错 ;List形式传参，程序报错
        DynamicArray<Bytes32> inputDataByte32 = new DynamicArray<Bytes32>(Bytes32.class , _dataBytes32);
        final Function function = new Function(
                "arrTest",
                Arrays.<Type>asList(
                        //错误示例
                        //dataBytes32
                        //正确示例
                        inputDataByte32
                ),
                Arrays.asList(
                        new TypeReference<Utf8String>() {
                        }
                )
        );
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static Contracts_Hzwq_sol_Hzwq load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_Hzwq_sol_Hzwq(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Contracts_Hzwq_sol_Hzwq load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_Hzwq_sol_Hzwq(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Contracts_Hzwq_sol_Hzwq load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Contracts_Hzwq_sol_Hzwq(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Contracts_Hzwq_sol_Hzwq load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Contracts_Hzwq_sol_Hzwq(contractAddress, web3j, transactionManager, contractGasProvider);
    }


}
